// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.AppView = (function(_super) {
  __extends(AppView, _super);

  function AppView() {
    return AppView.__super__.constructor.apply(this, arguments);
  }

  AppView.prototype.template = _.template('<button class="hit-button">Hit</button> <button class="stand-button">Stand</button> <div class="player-hand-container"></div> <div class="dealer-hand-container"></div>');

  AppView.prototype.events = {
    'click .hit-button': function() {
      this.model.get('playerHand').hit();
      return this.checkScore();
    },
    'click .stand-button': function() {
      return this.playDealer();
    }
  };

  AppView.prototype.initialize = function() {
    return this.render();
  };

  AppView.prototype.render = function() {
    this.$el.children().detach();
    this.$el.html(this.template());
    this.$('.player-hand-container').html(new HandView({
      collection: this.model.get('playerHand')
    }).el);
    return this.$('.dealer-hand-container').html(new HandView({
      collection: this.model.get('dealerHand')
    }).el);
  };

  AppView.prototype.checkScore = function() {
    if (this.model.get('playerHand').minScore() > 21) {
      this.model.get('dealerHand').reveal();
      return this.restart('You lose!');
    }
  };

  AppView.prototype.playDealer = function() {
    var dealer, player;
    dealer = this.model.get('dealerHand');
    player = this.model.get('playerHand');
    dealer.reveal();
    while (dealer.minScore() < 21 && dealer.minScore() < player.minScore()) {
      dealer.hit();
    }
    if (dealer.minScore() > 21) {
      return this.restart('You win!', true);
    } else {
      return this.restart('Dealer wins!');
    }
  };

  AppView.prototype.restart = function() {
    alert(arguments[0]);
    this.model.initialize();
    this.render();
  };

  return AppView;

})(Backbone.View);
